from langchain_google_genai import ChatGoogleGenerativeAI
from langchain_core.prompts import PromptTemplate
from langchain_core.runnables import Runnable

from .token_usage_tracker import TokenUsage, update_token_usage

class Summarizer:
    """A class for summarizing text using a Google Generative AI model (Gemini).

    This class handles the prompt formatting and LLM execution for summarization tasks.
    It also tracks token usage for billing or monitoring purposes.

    Attributes:
        _tokusage (TokenUsage): Tracks the total token usage for summarization operations.
    """

    def __init__(self, google_api_key : str):
        """
        Initialize the Summarizer with a Gemini API key.

        Args:
            google_api_key (str): Your Google Generative AI API key.
        """
        self._tokusage = TokenUsage()

        # Prepare the LLM
        self._llm = ChatGoogleGenerativeAI(
            model = "gemini-1.5-pro",
            google_api_key = google_api_key
        )

        # Set up the summarization prompt
        self._prompt = PromptTemplate.from_template(
            "次の内容を要約してください：\n{text}"
        )

        self._chain : Runnable = self._llm | self._prompt

    async def summarize(self, text : str) -> str:
        """
        Generate a summary of the given text using the LLM.

        Args:
            text (str): The input text to be summarized.

        Returns:
            str: The summarized result generated by the LLM.

        Note:
            The token usage from this call is tracked and stored in `_tokusage`.
        """
        response = await self._chain.ainvoke(
            {"text" : text}
        )

        # TODO: Add exception handling

        update_token_usage(self._tokusage, response)

        return response.content
    
    @property
    def token_usage(self) -> TokenUsage:
        """
        Get the accumulated token usage for all summarization calls.

        Returns:
            TokenUsage: An object containing input, output, and total token counts.
        """
        return self._tokusage
